#+title: Emacs configuration
#+author: Lorenzo Colombo


* General section

** Packages and repositories setup

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

** Generic settings
*** Defaults

#+begin_src emacs-lisp
(auto-save-mode -1)
(tool-bar-mode -1)
(menu-bar-mode 1)
(electric-pair-mode 1)
(global-display-line-numbers-mode 1)
(column-number-mode 1)
(repeat-mode 1)

(setq-default word-wrap t
			    tab-width 4
			    isearch-lazy-count t
			    indent-tabs-mode nil)
(setq display-line-numbers-type 'relative
	    inhibit-startup-screen 't
	    make-backup-files nil
	    auto-save-default nil
	    ring-bell-function 'ignore)

(put 'donwcase-region 'disabled nil)

(add-to-list 'default-frame-alist '(height . 34))
(add-to-list 'default-frame-alist '(width . 102))

(set-frame-font "Iosevka Nerd Font Propo Bold 14" nil t)
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

*** Mark

#+begin_src emacs-lisp
(setq mark-ring-max 6
	    global-mark-ring-max 8)
(setq-default set-mark-comand-repeat nil)
#+end_src

*** Whitespace

I really just want some of the numerous available highlights.

#+begin_src emacs-lisp
(setq-default whitespace-style '(face spaces empty tabs trailing space-mark tab-mark)
			    whitespace-display-mappings '((space-mark 32 [183] [46])
											(tab-mark ?\t [187 ?\t] [62 ?\t])))
#+end_src

By default the highlight of ~whitespace-mode~ marks are too flashy; this sets them to a more muted gray color.

#+begin_src emacs-lisp
(custom-set-faces
 `(whitespace-space ((t (:foreground "#555555"))))
 `(whitespace-tab   ((t (:foreground "#555555" :bold t)))))
#+end_src

An finally here is a handy keymap to toggle ~whitespace-mode~:

#+begin_src emacs-lisp
(global-set-key (kbd "C-c w w") 'whitespace-mode)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

*** Dired

This prevents ~dired~ to open and leave open a new buffer for every directory visited

#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
(add-hook 'dired-mode-hook
		  (lambda () (local-set-key (kbd "RET") #'dired-find-alternate-file)))
#+end_src

This gives some better formatting of the ~dired~ listings; unfortunately it does not work on MacOs.

#+begin_src emacs-lisp
(unless (eq system-type 'darwin)
    (setq dired-listing-switches "--group-directories-first -alhF"))
#+end_src

*** Window & window movements

These bindings are chosen in order to avoid potential conflicts with other modes or packages that require ~S-<arrows>~ to do stuff.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c <right>") #'windmove-right)
(global-set-key (kbd "C-c <left>") #'windmove-left)
(global-set-key (kbd "C-c <up>") #'windmove-up)
(global-set-key (kbd "C-c <down>") #'windmove-down)
#+end_src

This is to bind to ~C-c DEL~ the command ~kill-buffer-and-window~:

#+begin_src emacs-lisp
(global-set-key (kbd "C-c DEL") #'kill-buffer-and-window)
#+end_src

This rebinds ~C-x C-o~ to the command ~window-swap-states~.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-o") #'window-swap-states)
#+end_src

*** Set meta key to CMD on MacOs

#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)
#+end_src

*** Color themes

The following block is to ensure that the themes usually set as default are installed before being loaded. This step is necessary only for the themes that may be set as default theme on startup to avoid errors.

#+begin_src emacs-lisp
(use-package naga-theme
  :defer t
  :ensure t)
(use-package klere-theme
  :defer t
  :ensure t)
(use-package color-theme-modern
  :defer t
  :ensure t)
(use-package miasma-theme
  :defer t
  :ensure t)

(load-theme 'euphoria t)
(set-cursor-color "#ff5500")
#+end_src

*** Custom functions and mappings

**** ~open-shell-in-split-window~
This function opens a terminal in a split window at the current working directory.
It is bound to ~C-M-<return>~.

#+begin_src emacs-lisp
(defun open-shell-in-split-window ()
  "Open a terminal in a split window"
  (interactive)
  (let ((buf (term "/usr/bin/zsh")))
	(switch-to-buffer (other-buffer buf))
	(switch-to-buffer-other-window buf)))

(global-set-key (kbd "C-M-<return>") #'open-shell-in-split-window)
#+end_src

**** ~goto-matching-par~
This function mimics th ~%~ command of Vi and Vi-like editors, moving the point to the matching parenthesis.
It is bound to ~C-%~.

#+begin_src emacs-lisp
(defun goto-matching-par (&optional arg)
  "Go to the matching parenthesis character if one is adjacent to point."
  (interactive "^p")
  (cond ((looking-at "\\s(") (forward-sexp arg))
        ((looking-back "\\s)" 1) (backward-sexp arg))
        ;; Now, try to succeed from inside of a bracket
        ((looking-at "\\s)") (forward-char) (backward-sexp arg))
        ((looking-back "\\s(" 1) (backward-char) (forward-sexp arg))))

(global-set-key (kbd "C-%") #'goto-matching-par)
#+end_src

**** ~kill-all-other-buffers~
This function kills all the open buffers except the one displayed in the current window.

#+begin_src emacs-lisp
(defun kill-all-other-buffers ()
  "Kill all the open buffers except the one displayed in the current window"
  (interactive)
  (let ((current-buf (window-buffer)))
	(dolist (buf (buffer-list))
	  (unless (eq current-buf buf)
		(kill-buffer buf))))
  (delete-other-windows)
  (message "all buffers have been killed"))

(global-set-key (kbd "C-x C-k") #'kill-all-other-buffers)
#+end_src

**** ~my-previous-line~ and ~my-next-line~
These functions are convenient when dealing with lines that wraps. If the functions are called with non ~nil~ prefix, they invoke the command ~next-logical-line~; otherwise, ~next-line~ is called.

#+begin_src emacs-lisp
(defun my-next-line (&optional arg)
  (interactive "^P")
  (if (not (eq arg nil))
	  (next-logical-line arg)
	(next-line)))

(defun my-previous-line (&optional arg)
  (interactive "^P")
  (if (not (eq arg nil))
	  (previous-logical-line arg)
	(previous-line)))

(global-set-key (kbd "C-n") #'my-next-line)
(global-set-key (kbd "C-p") #'my-previous-line)
#+end_src

**** ~break-at-period~
This function inserts a new line character after every period, unless the period is already at the end of a line. It is meant to be used in text files (Markdown, LaTeX, Groff etc...) as a formatting function. Since it is usually invoked /una tantum/, it is not necessary to bind it to any special key sequence.

#+begin_src emacs-lisp
(defun break-at-period ()
  "Insert a line feed character after every period that is not already at
the end of a line"
  (interactive)
  (save-excursion
	(beginning-of-buffer)
	(while (search-forward "." nil t)
	  (when (eq (char-after) 32) ;; "32" is the whitespace char
        (delete-char 1)
		(insert ?\n)))))
#+end_src

**** ~tt~ (toggle transparency)

Self explanatory, this function toggles the current frame transparency.
It is bound to ~"C-t"~.

#+begin_src emacs-lisp
(defun tt ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(90 . 50) '(100 . 100)))))
(global-set-key (kbd "C-t") #'tt)
#+end_src

**** ~accented~

Convenience function to insert at point an accented character.
This function was perfected by ~u/thetemp_~ on a Reddit thread.
It is bound ~"C-`"~.

#+begin_src emacs-lisp
(defun accented ()
  (interactive)
  (let* ((char-alist '((?a "á" "Á" "à" "À" "â" "Â" "ä" "Ä" "ã" "Ã" "å" "Å" "æ" "Æ")
                       (?e "é" "É" "è" "È" "ê" "Ê" "ë" "Ë")
                       (?i "í" "Í" "ì" "Ì" "î" "Î" "ï" "Ï")
                       (?o "ó" "Ó" "ò" "Ò" "ô" "Ô" "ö" "Ö" "õ" "Õ" "ø" "Ø" "œ" "Œ")
                       (?u "ü" "Ü" "ù" "Ù" "ú" "Ú" "û" "Û")
                       (?c "ç" "Ç")
                       (?n "ñ" "Ñ")
                       (?s "ß")))
         (char-keys (mapcar #'car char-alist))
         (chosen-key (read-char-choice
                      ;; Generate prompt using list of keys from `char-alist'
                      (concat "Accent a character: "
                              (mapconcat (lambda (k) (make-string 1 k)) char-keys " ")
                              " ")
                      char-keys))
         (chosen-char-list (alist-get chosen-key char-alist))
         (chosen-char (if (= (length chosen-char-list) 1)
                          (car chosen-char-list)
                        (completing-read "-> " chosen-char-list))))
    (insert chosen-char)))
(global-set-key (kbd "C-`") #'accented)
#+end_src
* Packages and Modes

** Eshell
To configure ~eshell~ is best to create a custom function that loads the configurations and call it with a hook.

#+begin_src emacs-lisp
(defun lc/configure-eshell ()
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))
#+end_src

#+begin_src emacs-lisp
(use-package eshell
  :ensure t
  :hook (eshell-first-time-mode . lc/configure-eshell))
#+end_src

** Rainbow-delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook ((lisp-mode . rainbow-delimiters-mode)
         (emacs-lisp-mode . rainbow-delimiters-mode)))
#+end_src

** Helpful

The ~helpful~ package provides a nicer interface for the standard help buffers. To do this more conveniently, it needs to override the standard help keybindings.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind (("C-h f" . helpful-callable)
		 ("C-h v" . helpful-variable)
		 ("C-h k" . helpful-key)
		 ("C-h x" . helpful-command)
		 ("C-h ." . helpful-at-point)))
#+end_src

** Marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :defer t
  :ensure t
  :init
  (marginalia-mode))
#+end_src

** Epub reader

#+begin_src emacs-lisp
(use-package nov
  :defer 5
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

** GIT interaction

First of all, we need to ensure ~magit~ as our Git client on Emacs;

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :ensure t)
#+end_src

Then, we install the ~git-gutter~ for seamless Git interaction and enable it globally;

#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :bind (("C-c p" . 'git-gutter:previous-hunk)
		("C-c n" . 'git-gutter:next-hunk)
		("C-c g s" . 'git-gutter:stage-hunk)
		("C-c g r" . 'git-gutter:revert-hunk))
  :config (global-git-gutter-mode 1))
#+end_src

To browse the Git history of the current document we can use ~git-timemachine~, bound to ~C-c g t~.

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :bind ("C-c g t" . git-timemachine-toggle))
#+end_src

** Expand-Region

#+begin_src emacs-lisp
(use-package expand-region
  :defer 2
  :ensure t
  :init (pending-delete-mode t)
  :bind ("C-." . er/expand-region))
#+end_src

With ~pending-delete-mode~ enabled, highligted text can be rapidly changed.

** Avy (jump around)

#+begin_src emacs-lisp
(use-package avy
  :defer 3
  :ensure t
  :bind ("C-c SPC" . 'avy-goto-char))
#+end_src

** Pdf-Tools
This package is important as it is used with ~AUCTeX~ as pdf viewer.

The list of incompatible modes is set to empty beacuse of conflicts that may arise, especially with ~line-numbers-mode~.

#+begin_src emacs-lisp
(use-package pdf-tools
  :defer t
  :ensure t
  :init (setq pdf-view-incompatible-modes '()
			  pdf-view-midnight-colors (cons "#33ff00" "#000000"))
  :init
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
  (pdf-tools-install))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :ensure t)
#+end_src

** LaTeX

The basic package for working with LaTeX on Emacs is the ~AUCTeX~ package.

#+begin_src emacs-lisp
(use-package auctex
  :defer t
  :ensure t
  :init (require 'latex)
  (setq TeX-parse-self t
		TeX-view-program-selection '((output-pdf "PDF Tools"))
		TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		TeX-source-correlate-start-server t
		Tex-source-correlate-method '((pdf . synctex)))
  (setq-default TeX-master "main")
  (TeX-source-correlate-mode)
  (define-key TeX-source-correlate-map [C-down-mouse-1] #'TeX-view-mouse)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
#+end_src

Reftex provides nice automplete features to LaTeX, especially for bibliography and indexes.

#+begin_src emacs-lisp
(require 'reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+end_src

** IDO & Vertico

We only need to install ~vertico~ and ~ido-vertical-mode~, as ~ido~ is a built-in package.

#+begin_src emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :init (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  :config
  (ido-mode 1)
  (ido-vertical-mode 1))
#+end_src

Installation and configuration of ~vertico~.

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :config (vertico-mode 1))
#+end_src

Mind that by default ~C-n~ and ~C-p~ are bound in the minibuffer to ~next-line~ and ~previous-line~, which ~vertico~ rebinds to ~vertico-next~ and ~vertico-previous~; we need to correct that, otherwise it would conflict with our global rebinding of ~C-n~ and ~C-p~ to ~my-next-line~ and ~my-previous-line~.

#+begin_src emacs-lisp
(keymap-set minibuffer-local-map "C-n" #'vertico-next)
(keymap-set minibuffer-local-map "C-p" #'vertico-previous)
#+end_src

** Org-mode and related

*** Org-Mode itself

We first make sure that a directory in our ~~/Documents~ directory is created (*if it doesn't already exist*) to store our ~.org~ files.

#+begin_src emacs-lisp
(unless (file-exists-p "~/Documents/OrgFiles")
  (make-directory "~/Documents/OrgFiles"))
#+end_src

Then, we can take care of the rest. As ~org-mode~ is built-in, it needs only to be configured.

#+begin_src emacs-lisp
(use-package org
  :defer t
  :ensure t
  :init (setq org-hide-emphasis-markers t
			  org-startup-folded 'content
			  org-startup-truncated nil
			  org-directory "~/Documents/OrgFiles"
			  org-edit-src-content-indentation 0
			  org-src-tab-acts-natively t
            org-ellipsis " "
			  org-src-preserve-indentation t
            org-capture-bookmark nil)
  :hook (org-mode . org-indent-mode))
#+end_src

~Citeproc~ is a neat package that helps formatting footnotes and bibliography when exporting from Org mode using ~org-export~.

#+begin_src emacs-lisp
(use-package citeproc
  :defer t
  :ensure t)
#+end_src

*** Bullets
~org-bullets~ needs to be installed and attached via hook to ~org-mode~.

#+begin_src emacs-lisp
(use-package org-bullets
  :defer 3
  :ensure t
  :custom (org-bullets-bullet-list '(""))
  :hook (org-mode . org-bullets-mode))
#+end_src

*** Org-agenda & Org-capture

Keybindings for rapid access:

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

**** Org-capture:

#+begin_src emacs-lisp
(unless (file-exists-p "~/Documents/OrgFiles/capture")
		(make-directory "~/Documents/OrgFiles/capture"))
(setq org-default-notes-file (concat org-directory "capture/notes.org"))
#+end_src

Here are the custom ~org-capture~ templates:

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("a" "Agenda" entry (file+headline "~/Documents/OrgFiles/capture/agenda.org" "Agenda")
         "* %?\n SCHEDULED: %T %i\n")
		("n" "Notes" entry (file+headline  "~/Docuements/OrgFiles/capture/notes.org" "Notes")
         "* %?\nEntered on %U\n %i\n")
		("t" "Todo" entry (file+headline "~/Documents/OrgFiles/capture/todos.org" "Tasks")
         "* TODO %?\n DEADLINE: %T\n %i\n")))
#+end_src

These functions are run after a new entry is added to the agenda or the to-do list, so that they are ordered in their files from the nearest to the farthest.

#+begin_src emacs-lisp
(defun sort-agenda ()
  (ignore-errors
	(let ((buf (find-file-noselect (concat org-directory "/capture/agenda.org"))))
	  (set-buffer buf)
	  (org-sort-entries nil ?s)
	  (save-buffer)))
  (kill-buffer "agenda.org"))

(defun sort-todos ()
  (ignore-errors
	(let ((buf (find-file-noselect (concat org-directory "/capture/todos.org"))))
	  (set-buffer buf)
	  (org-sort-entries nil ?d)
	  (save-buffer)))
  (kill-buffer "todos.org"))

(add-hook 'org-capture-after-finalize-hook #'sort-agenda)
(add-hook 'org-capture-after-finalize-hook #'sort-todos)
#+end_src

**** Org-agenda:

#+begin_src emacs-lisp
(setq org-agenda-span 'year
	  org-agenda-files '("~/Documents/OrgFiles/capture"))
#+end_src

*** Org-Roam

We need to make sure that a directory for ~org-roam~ exists, so we create it in case it doesn't.

#+begin_src emacs-lisp
(unless (file-exists-p "~/Documents/OrgFiles/org-roam")
  (make-directory "~/Documents/OrgFiles/org-roam"))
#+end_src

#+begin_src emacs-lisp
(use-package org-roam
  :defer t
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Documents/OrgFiles/org-roam/"))
  (find-file-visit-truename t)
  (org-roam-capture-templates '(("c" "Concept Notes" plain "#+STARTUP: content\n\n* Description\n%?\n\n* Bibliography\n\n* Primary sources"
								   :if-new (file+head "con_${slug}.org" "#+title: con_${concept}"))
                                ("l" "Literature notes" plain
                                 "#+STARTUP: show2levels\n\n* lit_${title}\nAuthor: %^{Author}\nFull title: %^{FullTitle}\nYear: %^{Year}\nType: %^{Type}\nFull reference: %^{FullReference}\n\n* Notes\n\n\n%?"
								   :if-new (file+head "lit_${slug}.org" "#+title: lit_${title}\n#+filetags: lit_${title}"))
                                ("p" "Project Notes" plain "#+STARTUP: content\n\n* ${title}\nType: %^{Type}\n\n* Description\n%?\n\n* Structure\n \n\n* Concepts\n"
                                 :if-new (file+head "pj_${slug}.org" "#+title: pj_${title}"))))
  :bind (("C-c r d" . org-roam-buffer-display-dedicated)
		   ("C-c r f" . org-roam-node-find)
		   ("C-c r g" . org-roam-graph)
		   ("C-c r i" . org-roam-node-insert)
		   ("C-c r c" . org-roam-capture))
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol))
#+end_src

*** Org-Roam-UI

~Org Roam UI~ provides a nice visualization tool to see your nodes in a web browser. The version available from MELPA is plug-and-play, so it just needs to be installed

#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure t
  :after org-mode)
#+end_src

** Completions
*** Corfu

~corfu~ is an amazing completion package, but in my experience, ~company~ works better with ~lsp-mode~ and ~yasnippet~. Since ~lsp-mode~ automatically enables ~company-mode~, we can enable ~corfu~ globally, and disable it when ~lsp-mode~ kicks in.

#+begin_src emacs-lisp
(use-package corfu
  :defer 3
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-quit-at-boundary t)
  (corfu-preselect 'first)
  (corfu-auto t)
  (corfu-auto-delay 0.1)
  (corfu-auto-prefix 1)
  :bind (:map corfu-map
			  ("C-n" . corfu-next)
			  ("C-p" . corfu-previous)
			  ("C-q" . corfu-quick-insert)
			  ("M-q" . corfu-quick-complete))
  :init (global-corfu-mode))
#+end_src

*** Cape

#+begin_src emacs-lisp
(use-package cape
  :defer 3
  :ensure t
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

*** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :config (setq completion-styles '(orderless partial-completion basic)
			    completion-category-defaults nil
				completion-category-overrides nil))
#+end_src

** Consult
The ~consult~ package gives an experience similar to Neovim's Telescope.

#+begin_src emacs-lisp
(use-package consult
  :defer
  :ensure t
  :bind
  (("C-c f f" . consult-find)
   ("C-c f s" . consult-ripgrep)
   ("C-c f m" . consult-mark)
   ("C-c f b" . consult-buffer)
   ("C-c f t" . consult-themes )))
#+end_src

** Dashboard

We first need to install the ~dashboard~ package and the ~all-the-icons~ package to add the icons. Remember that ~all-the-icons~ needs to initialize with the comand ~M-x all-the-icons-install-fonts RET~.

#+begin_src emacs-lisp
(use-package all-the-icons
  :defer 10
  :ensure t)

(use-package dashboard
  :ensure t
  :init (setq dashboard-icon-type 'all-the-icons
			  dashboard-set-heading-icons nil
			  dashboard-set-file-icons t
			  dashboard-projects-backend 'projectile
			  dashboard-items '((bookmarks . 5)
                                (agenda . 5)
                                (projects . 5)
                                (recents . 10)))
  :config (dashboard-setup-startup-hook))
(global-set-key (kbd "C-c d o") 'dashboard-open)
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :defer t
  :ensure t
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (define-key projectile-command-map (kbd "s") 'projectile-ripgrep)
  (projectile-mode +1))
#+end_src

~ripgrep.el~, to have Ripgrep capabilities with ~projectile-ripgrep~ command

#+begin_src emacs-lisp
(use-package ripgrep
  :defer 10
  :ensure t)
#+end_src

** Move-text

Installation and configuration to use default key-bindings:

#+begin_src emacs-lisp
(use-package move-text
  :defer t
  :ensure t
  :init (move-text-default-bindings))
#+end_src

And this is a function to auto indent when moving a line:

#+begin_src emacs-lisp
(defun indent-region-advice (&rest ignored)
  (let ((deactivate deactivate-mark))
    (if (region-active-p)
      (indent-region (region-beginning) (region-end))
      (indent-region (line-beginning-position) (line-end-position)))
    (setq deactivate-mark deactivate)))
(advice-add 'move-text-up :after 'indent-region-advice)
(advice-add 'move-text-down :after 'indent-region-advice)
#+end_src

** Mode line (~doom-modeline~)

Install ~doom-modeline~ package and the ~nerd-icons~ package; in order for this to run properly, it is required to run the command ~M-x nerd-icons-install-fonts RET~.

#+begin_src emacs-lisp
(use-package nerd-icons
  :defer 10
  :ensure t)
(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1)
  (setq doom-modeline-enable-word-count t))
#+end_src

** Tree file explorer (~neotree~)

Install the ~neotree~ package and the ~all-the-icons~ package:

#+begin_src emacs-lisp
(use-package neotree
  :defer 10
  :ensure t
  :bind ("C-c e" . neotree-toggle)
  :init
  (setq neo-smart-open t
		neo-window-width 35)
  (when (display-graphic-p) (require 'all-the-icons))
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

** Wrap-region

#+begin_src emacs-lisp
(use-package wrap-region
  :defer t
  :ensure t
  :init (setq wrap-region-except-modes 'dired-mode)
  :config (wrap-region-mode t))
#+end_src

** Spell check

It is necessary to have ~hunspell~ and the dictionary packages installed on the system. If the language package of the current locale is not installed or not found, ~flyspell~ might throw an error; in that case, setting the environment variable ~$DICPAT~ may solve the issue (eg: by evaluating ~(setenv "DICPATH" "/path/to/hunspell")~). Given that ~hunspell~ seems not to work correctly on MacOs, we set it only on non-darwin systems.

#+begin_src emacs-lisp
(unless (eq system-type 'darwin)
  (setq ispell-program-name "hunspell"))
(add-hook 'org-mode-hook 'flyspell-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'nroff-mode-hook 'flyspell-mode)
#+end_src

The key-binding I use for ~expand regiorn~, ~C-.~ conflicts with flyspell-correct-word, so we need to disable it when flyspell is running:

#+begin_src emacs-lisp
(add-hook 'flyspell-mode-hook (lambda () (unbind-key "C-." 'flyspell-mode-map)))
#+end_src

This custom interactive function is to set the spelling to Italian an run ~flyspell-buffer~.

#+begin_src emacs-lisp
(defun spell-it ()
  (interactive)
  "Sets the spelling language to Italian and spell checks the buffer"
  (ispell-change-dictionary "italiano")
  (flyspell-buffer))
#+end_src

** Languagetool

Languagetool is a neat program that provides language, grammar and syntax analysis. It needs to be installed on the system outside of Emacs with the package manager.

#+begin_src emacs-lisp
(use-package languagetool
  :ensure t
  :defer t
  :commands (languagetool-check
             languagetool-clear-suggestions
             languagetool-correct-at-point
             languagetool-correct-buffer
             languagetool-set-language
             languagetool-server-mode
             languagetool-server-start
             languagetool-server-stop)
  :config
  (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"
                                    "-cp" "/usr/share/languagetool:/usr/share/java/languagetool/*")
      languagetool-console-command "org.languagetool.commandline.Main"
      languagetool-server-command "org.languagetool.server.HTTPServer"))
#+end_src
